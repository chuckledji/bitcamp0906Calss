package day0927;
// 객체지향의 5원칙
// SOLID
// S: 단일 책임 원칙 -> 클래스는 한번에 한가지의 책임만 가져야 한다.
// O: 개방-폐쇄 원칙 -> 클래스는 확장에는 개방적이어야 하고 변화에는 폐쇄적이어야 한다.
// L: 리스코프 원칙 -> 자식 클래스의 자리는 언제나 부모 클래스로 치환 가능하다.
// I: 인터페이스 분리원칙 -> 인터페이스를 작은 사이즈로 만들어라
// D: 의존성 역전 원칙 -> 추상화가 많이 된 클래스는 추상화가 많이 안된 클래스에 의존적인 관계여서는 안된다

// MVC 패턴
// MVC 패턴은 현재 가장 많이 사용되는 프로그래밍 패턴중에 하나로써
// 여러분들의 클래스를 크게 3가지로 나누어서 분류하는 방법이다.
// Model: 모델. 데이터를 담는 객체를 담당하는 클래스로써, 주로 이름 끝에 VO 혹은 DTO 가 붙는 경우가 대부분이다.
//        해당 클래스들은 클래스 안에 필드와 java.lang.Object 클래스의 오버라이드 메소드만 존재한다.
// View: 뷰. 사용자가 보게 될 화면을 담당하는 클래스로써 UI 라고 생각하면 편하다.
//       컨트롤러가 보내준 데이터를 화면에 출력하거나 혹은 사용자가 입력한 데이터를 컨트롤러로 보내주는 역할을 하게 된다.
//       웹 프로그래밍의 경우, HTML이 뷰가 될 수도 있지만 현재 우리는 콘솔에서 프로그래밍 하므로 담당 클래스를 따로 만들어주면 된다.
// Controller: 컨트롤러는 데이터베이스와의 통신을 담당하여 데이터베이스가 보내준 데이터를 객체의 모양으로 만들어주거나, 
//             뷰에서 보내준 객체의 형태의 데이터를 데이터베이스에 추가하는 등의 역할을 맡는다.

public class Ex01 {

}
