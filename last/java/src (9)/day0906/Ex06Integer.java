package day0906;
// 기본형 데이터타입 01
// 정수형 기본 데이터타입
// 정수란?
// 소숫점이 존재하지 않는 온전한 숫자를 정수라고 한다.
// 정수형 기본 데이어타입에는
// byte, short, int, long 4가지 데이터타입이 있다.
// byte: 8비트. -2의 7승~2의 7승-1까지 총 2의 8승 개의 숫자를 저장할수 있다.
// short: 16비트. -2의 15승~2의 15승-1까지 총 2의 16승 개의 숫자를 저장할수 있다.
// int: 32비트. -2의 31승~2의 31승-1까지 총 2의 32승 개의 숫자를 저장할수 있다.
// long: 64비트. -2의 63승~2의 63승-1까지 총 2의 64승 개의 숫자를 저장할수 있다.

// 단 자바에서는, 기본적으로 코드안에 적혀져 있는 정수를 자동으로
// int 크기의 2진법으로 변환해주기 때문에
// 우리는 정수형 데이터타입을 사용할 시에는 
// int 혹은 long을 사용하면 된다.

public class Ex06Integer {
    public static void main(String[] args) {
     
        // byte 데이터타입 변수 myByte을 선언하고 30을 초기화해보자
        // 변수 혹은 상수의 선언과 초기화는 우리가 한줄로 해줄 수 있는데
        // 그 때에는
        // (final) 데이터타입 이름 = 값; 이라고 적어주면 된다.
        
        byte myByte = 30;
        
        // myByte의 현재 값을 화면에 출력해보자
        System.out.println(myByte);
        
        // byte의 범위는 -128~127까지이다.
        // 그렇다면 우리가 myByte에 1000을 저장할려고 하면 어떻게 될까?
        // myByte = 1000; -> 에러가 발생한다.
        
        // 기본적으로 코드에 있는 정수를
        // 자바는 int로 인식하기 때문에
        // 우리가 int 데이터타입의 변수 혹은 long 데이터타입의 변수를 사용하면 된다.
        
        // int 데이터타입의 변수 number를 선언하고 1000으로 초기화해보자
        int number = 1000;
        // 위 코드는 byte와는 다르게 1000이란 숫자가 int의 범위(약 -20억부터 +20억까지)에 속하므로
        // 에러가 발생하지 않는다.
        
        // number의 현재 값을 화면에 출력해보자
        System.out.println(number);
        
        // 즉 우리도 굳이 더 작은 데이터타입인 byte 혹은 short을 사용할 필요가 없고
        // int 이상의 크기를 가진 int 혹은 long 데이터타입을 쓰는게 좋다.
        
    }  

}















